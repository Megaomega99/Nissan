version: '3.8'

services:
  # Frontend - React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api/v1

  # Backend - FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    depends_on:
      - db
      - redis
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nissan_ml
      - POSTGRES_PORT=5432
      - SECRET_KEY=superclavesecreta123456789
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - UPLOAD_DIRECTORY=/app/uploads

  # Worker de Celery para tareas as√≠ncronas
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    depends_on:
      - redis
      - backend
      - db
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nissan_ml
      - POSTGRES_PORT=5432
      - SECRET_KEY=superclavesecreta123456789
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - UPLOAD_DIRECTORY=/app/uploads

  # Base de datos PostgreSQL
  db:
    build:
      context: ./database
      dockerfile: Dockerfile
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nissan_ml

  # Redis para Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data: